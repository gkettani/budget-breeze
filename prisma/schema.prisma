generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  transactions      Transaction[]
  categories        Category[]
  financialAccounts FinancialAccount[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Transaction {
  id                 String           @id @default(cuid())
  userId             String
  description        String
  amount             Float
  date               DateTime
  categoryId         String?
  category           Category?        @relation(fields: [categoryId], references: [id])
  financialAccountId String
  financialAccount   FinancialAccount @relation(fields: [financialAccountId], references: [id], onDelete: Cascade)
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([categoryId])
  @@index([financialAccountId])
  @@index([userId])
}

model Category {
  id           String        @id @default(cuid())
  userId       String
  name         String        @unique
  budget       Float         @default(0)
  target       Float         @default(0)
  transactions Transaction[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model FinancialAccount {
  id           String        @id @default(cuid())
  userId       String
  name         String        @unique
  balance      Float
  transactions Transaction[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
